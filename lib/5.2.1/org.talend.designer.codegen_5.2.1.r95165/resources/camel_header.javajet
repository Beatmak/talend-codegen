<%@ jet
	imports="
		java.util.List
		java.util.ArrayList
		java.util.Vector
		java.util.Map
		org.talend.core.GlobalServiceRegister
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.IElementParameter
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.utils.NodeUtil
		org.talend.core.model.utils.JavaResourcesHelper
		org.talend.core.ui.branding.IBrandingService
		org.talend.core.ui.branding.AbstractBrandingService
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.designer.runprocess.CodeGeneratorRoutine
		org.talend.designer.codegen.i18n.Messages
		org.talend.designer.codegen.ITalendSynchronizer
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	Vector v = (Vector) codeGenArgument.getArgument();
	IProcess process = (IProcess) v.get(0);
	String version = (String) v.get(1);

	boolean startable = false;
	for (INode node : (List< ? extends INode>)process.getGraphicalNodes()) {
		Object value = node.getPropertyValue("STARTABLE");
		startable = value == null? false:(Boolean)value;
		if(startable){
			break;
		}
	}

	boolean stats = codeGenArgument.isStatistics();

	List< ? extends INode> processNodes = (List< ? extends INode>)process.getGeneratingNodes();
%>
		return new RouteBuilder() {
			public void configure() throws Exception {
<%
	for (INode node : processNodes) {
		if (node.getComponent().getName().equals("cCXF")) {
			IElementParameter param = node.getElementParameter("LABEL");
		   	String cid = node.getUniqueName();
		//  http://jira.talendforge.org/browse/TESB-5241
			/*
		   	 * change to use label + unique to make it unique but readable
		   	 */
			if(param != null && !"__UNIQUE_NAME__".equals(param.getValue())){
				cid = (String)param.getValue()+"_"+cid;	
			}
			String endpointVar = "endpoint_" + node.getUniqueName();
			String uriRef = "uriMap.get(\"" + cid + "\")";
%>
				// CXF endpoint for <%=cid%>
				org.apache.camel.Endpoint <%=endpointVar%> = endpoint(<%=uriRef%>);
<%
			String useSL = ElementParameterParser.getValue(node, "__ENABLE_SL__");
			String useSAM = ElementParameterParser.getValue(node, "__ENABLE_SAM__");
			if ("true".equals(useSL)) {
				List<Map<String, String>> customProperties = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__SL_META_DATA__");
%>
				// Add Service Locator Service to <%=endpointVar%>
				if (null != bundleContext) {
					org.talend.esb.servicelocator.cxf.LocatorFeature locatorFeature = new org.talend.esb.servicelocator.cxf.LocatorFeature();

					<% if (!customProperties.isEmpty()) { %>
						java.util.Map<String, String> slCustomProps_<%=cid%> = new java.util.HashMap<String, String>();
						<% for (Map<String, String> custProp : customProperties) { %>
							slCustomProps_<%=cid%>.put(<%=custProp.get("NAME")%>, <%=custProp.get("VALUE")%>);
						<% } %>
<%
							boolean actAsConsumer = false;
							List<? extends IConnection> conns = node.getIncomingConnections();
							if (!conns.isEmpty()) {
								INode source = conns.get(0).getSource();
								if (!("cErrorHandler".equals(source.getComponent().getName())
										&& source.getIncomingConnections().isEmpty())) {
									actAsConsumer = true;
								}
							}
%>
						<% if (actAsConsumer) { %>
							locatorFeature.setRequiredEndpointProperties(slCustomProps_<%=cid%>);
						<% } else { %>
							locatorFeature.setAvailableEndpointProperties(slCustomProps_<%=cid%>);
						<% } %>
					<% } %>

					((org.apache.camel.component.cxf.CxfEndpoint)<%=endpointVar%>).getFeatures().add(locatorFeature);
				}
<%
			}
			//http://jira.talendforge.org/browse/TESB-3850
			String formatType = ElementParameterParser.getValue(node, "__DATAFORMAT__");
			if ("true".equals(useSAM) && !"RAW".equals(formatType)) {
%>
				// Add Service Activity Monitor Service to <%=endpointVar%>
				if (eventFeature != null) {
					((org.apache.camel.component.cxf.CxfEndpoint)<%=endpointVar%>).getFeatures().add(eventFeature);
				}
<%
			}
		}
	}
%>
<%
	for (INode node : processNodes) {
		if (node.isActivate()) {
			if (node.getComponent().getName().equals("cAggregate")) {
				boolean usePersistence = "true".equals(ElementParameterParser.getValue(node, "__USE_PERSISTENCE__"));
				String repository = ElementParameterParser.getValue(node, "__REPOSITORY__");
				if (usePersistence) {
					boolean useRecovery = "true".equals(ElementParameterParser.getValue(node, "__USE_RECOVERY__"));
					String recoveryInterval = ElementParameterParser.getValue(node, "__RECOVERY_INTERVAL__");
					String deadLetterUri = ElementParameterParser.getValue(node, "__DEAD_LETTER_URI__");
					String maximumRedeliveries = ElementParameterParser.getValue(node, "__MAXIMUM_REDELIVERIES__");

					if ("AGGREGATION".equals(repository)) {
%>
						org.apache.camel.spi.AggregationRepository repo_<%=node.getUniqueName() %> = new <%=ElementParameterParser.getValue(node, "__CUSTOM_REPOSITORY__") %>;
<%
					} else if ("RECOVERABLE".equals(repository)) {
%>
						org.apache.camel.spi.RecoverableAggregationRepository repo_<%=node.getUniqueName() %> = new <%=ElementParameterParser.getValue(node, "__CUSTOM_REPOSITORY__") %>;
<%
						if (useRecovery) {
%>
							repo_<%=node.getUniqueName() %>.setUseRecovery(true);
							repo_<%=node.getUniqueName() %>.setMaximumRedeliveries(<%=maximumRedeliveries%>);
							repo_<%=node.getUniqueName() %>.setDeadLetterUri(<%=deadLetterUri%>);
							repo_<%=node.getUniqueName() %>.setRecoveryInterval(<%=recoveryInterval%>);
<%
						}
					} else if ("HAWTDB".equals(repository)) {
						boolean usePersistentFile = "true".equals(ElementParameterParser.getValue(node, "__USE_PERSISTENT_FILE__"));
						String persistentFile = ElementParameterParser.getValue(node, "__PERSISTENT_FILENAME__");
						if (usePersistentFile) {
%>
							org.apache.camel.component.hawtdb.HawtDBAggregationRepository repo_<%=node.getUniqueName() %> = new org.apache.camel.component.hawtdb.HawtDBAggregationRepository("<%=node.getUniqueName() %>", <%=persistentFile%>);
<%
						} else {
%>
							org.apache.camel.component.hawtdb.HawtDBAggregationRepository repo_<%=node.getUniqueName() %> = new org.apache.camel.component.hawtdb.HawtDBAggregationRepository("<%=node.getUniqueName() %>");
<%
						}
						if (useRecovery) {
%>
							repo_<%=node.getUniqueName() %>.setUseRecovery(true);
							repo_<%=node.getUniqueName() %>.setMaximumRedeliveries(<%=maximumRedeliveries%>);
							repo_<%=node.getUniqueName() %>.setDeadLetterUri(<%=deadLetterUri%>);
							repo_<%=node.getUniqueName() %>.setRecoveryInterval(<%=recoveryInterval%>);
<%
						}
					}
				}
			}
		}
	}
%>